package de.jcup.quickadopt;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;

public class MavenStructureAdopter {

	public void adopt(String projectName, File projectRootDirectory) throws IOException{
		File[] files = projectRootDirectory.listFiles();
		AdoptionContext context = new AdoptionContext();
		/* scan subfolders*/
		for (File file: files){
			if (file.isDirectory()){
				adoptDirectoriesRecursive(context, file);
			}
		}
		System.out.println(context);
		File classPath= new File(projectRootDirectory, ".classpath");
		File classPath_origin= new File(projectRootDirectory, ".classpath_origin");
		
		File project = new File(projectRootDirectory, ".project");
		File project_origin = new File(projectRootDirectory, ".project_origin");
		
		if (!project_origin.exists()){
			if (project.exists()){
				FileUtil.copyFile(project, project_origin);
			}
		}
		if (!classPath_origin.exists()){
			if (classPath.exists()){
				FileUtil.copyFile(classPath, classPath_origin);
			}
		}
		
		writeFiles(projectName, projectRootDirectory, context, classPath, project);
	}

	private void adoptDirectoriesRecursive(AdoptionContext context, File file){
		File[] files = file.listFiles(new FileFilter() {
			
			@Override
			public boolean accept(File pathname) {
				return pathname.isDirectory();
			}
		});
		for (File child: files){
			String childName = child.getName();
			if ("build".equals(childName)){
				continue;
			}
			if ("src".equals(childName)){
				File[] sourceSubFolders = child.listFiles(new FilenameFilter() {
					
					@Override
					public boolean accept(File dir, String name) {
						if (name.equals("main")){
							return true;
						}
						if (name.equals("test")){
							return true;
						}
						return false;
					}
				});
				for (File sourceSubFolder: sourceSubFolders){
					File[] srcSubSubFolders = sourceSubFolder.listFiles(new FilenameFilter() {
						
						@Override
						public boolean accept(File dir, String name) {
							if (name.equals("java")){
								return true;
							}
							if (name.equals("groovy")){
								return true;
							}
							if (name.equals("res")){
								return true;
							}
							if (name.equals("resources")){
								return true;
							}
							return false;
						}
					});
					for (File accepted: srcSubSubFolders){
						context.sourceFolderAdoptables.add(accepted);
					}
				}
			}else{
				adoptDirectoriesRecursive(context, child);
			}
		}
	}

	private void writeFiles(String projectName, File projectRootDirectory, AdoptionContext context, File classPath,
			File project) throws IOException {
		/* make new files */
		String ls = System.getProperty("line.separator");
		StringBuilder projectSb = new StringBuilder();
		projectSb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>").append(ls);
		projectSb.append("<projectDescription>").append(ls);
		projectSb.append("   <name>").append(projectName).append("</name>").append(ls);
		projectSb.append("   <comment>").append("Auto generated by QuickAdopt plugin").append("</comment>").append(ls);
		projectSb.append("   <projects/>").append(ls);
		projectSb.append("   <natures>").append(ls);
		projectSb.append("       <nature>org.eclipse.jdt.core.javanature</nature>").append(ls);
		projectSb.append("   </natures>").append(ls);
	    projectSb.append("   <buildSpec>").append(ls);
	    projectSb.append("       <buildCommand>").append(ls);
	    projectSb.append("            <name>org.eclipse.jdt.core.javabuilder</name>").append(ls);
	    projectSb.append("            <arguments/>").append(ls);
	    projectSb.append("       </buildCommand>").append(ls);
	    projectSb.append("   </buildSpec>").append(ls);
	    projectSb.append("   <linkedResources/>").append(ls);
	    projectSb.append("</projectDescription>").append(ls);
		
		
		StringBuilder claspathSb = new StringBuilder();
		claspathSb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>").append(ls);
		claspathSb.append("<classpath>").append(ls);
		claspathSb.append("   <classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\"/>").append(ls);
		for(File sourceFolder: context.sourceFolderAdoptables){
			StringBuilder sb = new StringBuilder();
			File parent = sourceFolder;
			boolean first=true;
			while (parent!=null && !projectRootDirectory.equals(parent)){
				if (!first){
					sb.insert(0,"/");
				}
				first=false;
				sb.insert(0,parent.getName());
				parent=parent.getParentFile();
			}
			String relativePath = sb.toString();
			claspathSb.append("   <classpathentry kind=\"src\" path=\"").append(relativePath).append("\"/>").append(ls);
		}
		claspathSb.append("     <classpathentry kind=\"output\" path=\"bin\"/>").append(ls);
		claspathSb.append("</classpath>").append(ls);
		
		System.out.println(".project="+classPath);
		System.out.println(".classpath="+classPath);
		
		try(BufferedWriter bw = new BufferedWriter(new FileWriter(project))){
			bw.write(projectSb.toString());
			System.out.println("written:"+project);
		}
		
		try(BufferedWriter bw = new BufferedWriter(new FileWriter(classPath))){
			bw.write(claspathSb.toString());
			System.out.println("written:"+classPath);
		}
		FileUtil.copyFile(classPath, new File(classPath.getParentFile(),".classpath_quickadopt"));
		FileUtil.copyFile(project, new File(project.getParentFile(),".project_quickadopt"));
	}
}
